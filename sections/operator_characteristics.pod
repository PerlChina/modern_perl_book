=encoding utf8

=head1 操作符特征

Z<operator_characteristics>
X<operators; characteristics>

C<perldoc perlop> 和 C<perldoc perlsyn> 提供了大量有关 Perl 操作符行为的信息。即
使如此，其中 I<没有> 提到的部分对于理解这些操作符来说更为重要。这部分文档假定你对
语言设计中的若干概念有着一定程度的熟悉。起初，这些概念也许听起来有些生硬，但是其实
是直截了当的。

每一个操作符持有若干构成其行为的重要特征：操作数的个数，和其他操作符的关系，以及
可能是用法。

=head2 优先级

Z<precedence>
X<precedence>

某操作符的 I<优先级> 有助 Perl 在对其在表达式中求值时做出决定。求值顺序从高到低。
例如，因乘法的优先级较加法高，C<7 + 7 * 10> 求值得 C<77>，而非 C<140>。你可以用
括号将子表达式分组使某操作符在其他操作符之前求值；C<(7 + 7) * 10> I<确实> 求值得
C<140>，因为加法操作符已经成为一个整体，并且必须在乘法发生之前完全求值。

在平手的情况下────两个操作符拥有同样的优先级────则由其他因素（如词缀性 L<fixity> 和结
合性 L<associativity>）来决定。

C<perldoc perlop> 包含了一张优先级表。几乎没有人记得住这张表。掌控优先级的最佳途径
就是让表达式尽量简单。另一种好方法就是在复杂的表达式中用括号来澄清优先级。如果你发
现自己淹没在括号的海洋中，再请参考第一条规则。

=head2 结合性

Z<associativity>
X<associativity>
X<associativity; left>
X<left associative>
X<associativity; right>
X<right associative>

某操作符的 I<结合性> 决定了它是从左往右求值还是从右往左。加法是左结合的，因此
C<2 + 3 + 4> 先求出 C<2 + 3>，然后再在此结果上加 C<4>。指数操作是右结合的，因
此 C<2 ** 3 ** 4>，先进行 C<3 ** 4> 这部分运算，然后再求得 C<2> 的 81 次方。

简化复杂的表达式并用括号来展示你的意图远比记住结合性表来得重要。虽说如此，记住
结合性表的数学操作符部分还是值得的。

=begin sidebar

X<B::Deparse>
X<precedence; disambiguation>
X<associativity; disambiguation>

核心模块 C<B::Deparse> 可以重写代码片段并如实展示 Perl 究竟是如何处理操作符优先
级和结合性的；在某代码片段上运行 C<perl -MO=Deparse,-p>。（C<-p> 标志添加额外的
分组括号使得求值顺序更为明显。）注意 Perl 的优化器会如前面的例子般简化数学操作，
你可以用变量替代，就像 C<$x ** $y ** $z>。

=end sidebar

=head2 参数数量

Z<arity>

X<arity>
X<operators; arity>
X<nullary>
X<unary>
X<binary>
X<trinary>
X<listary>

操作符的 I<参数数量> 就是该操作符所作用的操作数的个数。I<空元> 操作符没有操作数。
I<一元> 操作符有一个操作数。I<二元> 操作符有两个操作数。I<三元> 操作符有三个操作
数。I<列元> 操作符对一个操作数列表进行操作。

除了大多数操作符都接受两个、多个或一个操作数这一事实，没有其他什么好的规则来决
定一个操作符的参数个数。操作符的文档会把这些交待清楚。

举例说来，算术运算符是二元操作符，它们通常是左结合的。C<2 + 3 - 4> 先对 C<2 + 3>
求值，加法和减法的优先级一致，但是它们是左结合并且是二元的，因此正确的求值顺序将
最左端的操作符（C<+>）应用到最左端的两个操作数（C<2> 和 C<3>）上，接着，将最右端
的操作符（C<->）应用在第一个操作符的结果和最右端的操作数（C<4>）上。

一个 Perl 新手疑问的常见来源就是嵌套表达式中的列元操作符（特别是函数调用）。请使用
括号表明你的意图，并且留意如下代码中的问题：

=begin programlisting

    # 可能是一段有缺陷的代码
    say ( 1 + 2 + 3 ) * 4;

=end programlisting

……由于 Perl 5 高兴地将括号解释为后环缀（L<fixity>）操作符并认为括号中的内容是 C<say>
的参数，而并非为改变优先级而对表达式分组的环缀括号。换句话说，这段代码打印出 C<6> 然
后求值 C<say> 的返回值乘以 C<4> 后的结果。

=head2 词缀性

Z<fixity>
X<fixity>
X<operators; fixity>
X<infix>
X<fixity; infix>
X<prefix>
X<fixity; prefix>
X<postfix>
X<fixity; postfix>
X<circumfix>
X<fixity; circumfix>
X<postcircumfix>
X<fixity; postcircumfix>

操作符的 I<词缀性> 就是它相对其操作数的位置：

=over 4

=item I<中缀> 操作符出现在操作数之间。大部分数学操作符是中缀操作符，例如 
C<$length * $width> 中的乘法操作符；

=item I<前缀> 操作符出现于其操作符之前而 I<后缀> 操作符出现于其操作符之后。这
些操作符通常是一元的，如数学上的负数符号（C<-$x>）、布尔取反（C<!$y>）以及后缀
自增（C<$z++>）；

=item I<环缀> 操作符包围其操作数。例子包括匿名哈希构造符（C<{ ... }>）和引述操
作符（C<qq[ ... ]>）；

=item I<后环缀> 操作符接在某些操作数之后并环绕其他部分，就向访问哈希或数组的元
素那样（C<$hash{ ... }> 和 C<$array[ ... ]>）。

=back
