=encoding utf8

=head1 原型

Z<prototypes>

X<prototypes>

I<原型（prototype）> 是一小块附加在函数生命上的可选元数据。新手通常假设这些原型可
以作为函数签名使用；但它们不是。相反它们服务于两个不同的目的：它们给予语法分析器
提示来改变对函数及其参数的语法分析，并且它们还修改了 Perl 5 处理函数参数的方式。

声明函数原型，只要在名称后加上它：

=begin programlisting

    sub foo        (&@);
    sub bar        ($$) { ... }
    my  $baz = sub (&&) { ... };

=end programlisting

你可以向函数前置声明（forward declaration）添加原型。你也可以在前置声明中忽
略它们。如果你使用带原型的前置声明，该原型必须完整地在函数声明中出现；如果不
这样做，Perl 将给出原型不匹配的警告。其逆命题不为真：你可以在前置声明中忽略
原型而在完整声明中包含它。

=begin sidebar

在前置声明中忽略原型没有什么理由，除非你有想法编写太过聪明的代码。

=end sidebar

原型最初的目的是允许用户定义它们自己的函数，这些函数的行为和（一些）内置操作
符一样。考虑 C<push> 操作符的行为，它接受一个数组和列表。虽然 Perl 5 正常情况
下在调用方将数组和列表展开为单个列表，Perl 5 语法分析器知道调用 C<push> 必须
有效地将数组作为一个单元传入，以使 C<push> 能够就地操作数组。

X<prototype>
X<keywords; prototype>

内置操作符 C<prototype> 接受一个函数名称并返回代表其原型的字符串。要参考内置关
键字的原型，使用 C<CORE::> 形式：

=begin programlisting

    $ B<perl -E "say prototype 'CORE::push';">
    \@@
    $ B<perl -E "say prototype 'CORE::keys';">
    \%
    $ B<perl -E "say prototype 'CORE::open';">
    *;$@

=end programlisting

一些内置操作符拥有你无法模拟的原型。在这些情况下，C<prototype> 将返回 C<undef>：

=begin programlisting

    $ B<perl -E "say prototype 'CORE::system' // 'undef' ">
    undef
    # 你无法模拟内置函数 C<system> 的调用惯例

    $ B<perl -E "say prototype 'CORE::prototype' // 'undef' ">
    undef
    # 内置函数 C<prototype> 没有原型

=end programlisting

再看看 C<push>：

=begin programlisting

    $ B<perl -E "say prototype 'CORE::push';">
    \@@

=end programlisting

C<@> 字符代表一个列表。反斜杠强制对对应的参数进行 I<引用>。因此这个函数接受一个
数组引用（因为你无法得到列表的引用）和一列值。C<mypush> 可能为：

=begin programlisting

    sub mypush (\@@)
    {
        my ($array, @rest) = @_;
        push @$array, @rest;
    }

=end programlisting

合法的原型字符包括强制标量参数的 C<$>，对应哈希的 C<%> （通常用作引用），以及标记
代码块的 C<&>。完整文档参考 C<perldoc perlsub>。

=head2 原型的问题

原型可以改变后续代码的语法分析过程而且它们会对参数进行强制类型转换。它们不是
函数参数类型和个数的文档，它们也不对应具名参数。

原型对参数的强制类型转换以一种隐晦的方式发生，诸如在传入参数上强制标量上下文：

=begin programlisting

    sub numeric_equality($$)
    {
        my ($left, $right) = @_;
        return $left == $right;
    }

    my @nums = 1 .. 10;

    say "They're equal, whatever that means!" if numeric_equality @nums, 10;

=end programlisting

……但请 I<不要> 进行比一个简单表达式还复杂的操作：

=begin programlisting

    sub mypush(\@@);

    # 编译错误：原型不匹配
    # （期待数组；得到标量赋值）
    mypush( my $elems = [], 1 .. 20 );

=end programlisting

这些还不算是来自原型的 I<最隐晦> 的误导。

=head2 原型的正当使用

只要代码维护者不将其作为完整的函数签名，原型还是有一些合法的用途的。

X<overriding core keywords>
X<overriding; keywords>
X<pragmas; subs>
X<subs pragma>

第一，它们在用用户定义函数模拟并覆盖内置关键字时是必须的。你必须先通过确认 C<prototype>
没有返回 C<undef> 来检查你是否 I<可以> 覆盖内置关键字。一旦知道了关键字的原型，你就
可以声明和核心关键字同名的前置定义：

=begin programlisting

    use subs 'push';

    sub push (\@@) { ... }

=end programlisting

注意，不管词法作用域与否，C<subs> 编译命令对 I<文件> 余下的部分都有效。

X<constants>

使用原型的第二个理由就是定义编译期常数。一个由空原型（作为 I<无> 原型的反面）声明
且求值得单个表达式的函数将成为常数而非函数调用：

=begin programlisting

    sub PI () { 4 * atan2(1, 1) }

=end programlisting

在处理该原型声明以后，Perl 5 优化器知道在余下的源代码中，它应该在碰到裸字或对 C<PI> 
带括号的调用时用计算得到的π值进行替换（同时遵循作用域和可见性）。

X<constant pragma>
X<pragmas; constant>
X<Readonly module>
X<modules; Readonly>

相对于直接定义常量，C<constant> 核心编译命令会为你处理这些细节并且更加易读。如果你
想将这些常量内插入字符串中，来自 CPAN 的 C<Readonly> 模块或许更加有用。

X<Test::Exception module>
X<modules; Test::Exception>

最后一个使用原型的理由是，它将 Perl 的语法扩展以便将匿名函数操作为代码块。CPAN 模块
C<Test::Exception> 很好地利用这一点提供了带延迟计算（delayed computation）的良好 API。
其中 C<throws_ok()> 函数接受三个参数：要运行的代码块、一个匹配异常字符串的正则表达式
以及一个对此测试可选的描述。假设你想测试 Perl 5 在意图在未定义值上调用方法时产生的异
常消息：

=begin programlisting

    use Test::More tests => 1;
    use Test::Exception;

    throws_ok
        { my $not_an_object; $not_an_object->some_method() }
        qr/Can't call method "some_method" on an undefined value/,
        'Calling a method on an undefined invocant should throw exception';

=end programlisting

此导出函数 C<throws_ok()> 拥有原型 C<&$;$>。它的第一个参数是代码块，Perl 会将其升级为
全功能匿名函数。第二个要求的参数是一个标量。第三个参数则是可选的。

最最细心的读者可能发现一个语法上奇怪的缺失：在作为第一参数传递给 C<throws_ok()> 的匿名
函数的结尾没有逗号。这是 Perl 5 语法分析器的古怪之处。加上逗号会引发语法错误。语法分析
器期待的是空白，而非逗号操作符。

=begin sidebar

“此处没有逗号”这一规则是原型语法的缺点。

=end sidebar

不带原型你也可以使用这一 API。这可不那么吸引人：

=begin programlisting

    use Test::More tests => 1;
    use Test::Exception;

    throws_okB<(>
        B<sub> { my $not_an_object; $not_an_object->some_method() }B<,>
        qr/Can't call method "some_method" on an undefined value/,
        'Calling a method on an undefined invocant should throw exception'B<)>;

=end programlisting

对函数原型的稍稍使用来替代对 C<sub> 的需要还是合理的。原型其他用法很少能足够令
人信服地胜过它们的缺点。

=begin sidebar

Ben Tilly 提出了第四条理由：在使用 C<sort> 时定义自定义函数。定义原型为 C<($$)> 的
函数将会使参数传入 C<@_> 而非包全局变量 C<$a> 和 C<$b>。这是一个罕见的情况，但可以
节省你的调试时间。

=end sidebar
