=encoding utf8

=head1 裸字

Z<barewords>

Perl 到处使用印记（sigil）和其他标点来同时帮助语法分析器和程序员区分具名实体的
类别。即便如此，Perl 仍是一门可塑的语言。你可以按偏好用最具创意的、可维护的、
混乱的、奇形怪状的风格来编写程序。可维护性是每一个优秀程序员都必须考虑的，但 Perl
开发者本身并不会冒昧地对 I<你> 认为的可维护性做出任何假设。

X<bareword>

Perl 语法分析器理解内置的 Perl 关键字和操作符；它知道 C<bless()> 意味着你在创建
对象（L<blessed_references>）。这些不太会产生歧义……但是 Perl 程序员可以通过使用
I<裸字（barewords）> 添加语法分析的复杂度。裸字是一个标识符，它没有印记或其他用
于说明其语法功用的附加消歧条件。因为 Perl 5 没有名为 C<curse> 的关键字，则出现在
源代码中的字面词 C<curse> 就是有歧义的。你是想操作一个变量 C<$curse> 还是调用函数
C<curse()>？C<strict> 编译命令有充分的理由对这类带歧义裸字的使用作出警告。

即便如此，基于充分的理由，裸字仍允许在 Perl 5 的若干地方使用。

=head2 裸字的正当使用

X<barewords; pros>
X<hashes; bareword keys>

Perl 5 中的哈希键是裸字。键的用法已经足够让语法分析器将其识别为单引号字符串
的等价物，因此它们不会产生歧义。还要注意意图通过对函数调用或内置操作符（例如
C<shift>）求值而 I<产生> 一个哈希键的做法并不如你想象的那样，除非你消除歧义。

=begin programlisting

    # 'shift' 字面值是键
    my $value = $items{B<shift>};

    # 由 shift 产出的值是键
    my $value = $items{B<shift @_>}

    # 一元加号足够用于消除歧义
    my $value = $items{B<+>shift};

=end programlisting

X<packages; bareword names>

从某种意义上说，Perl 5 中的包名是裸字。良好的包命名习惯（首字母大写）有助于避免
意外情况，但是语法分析器使用启发式（heuristic）方法决定 C<< Package->method() >>
是否意味着先调用一个名为 C<Package()> 的函数接着调用结果的 C<method()> 方法，或者
是否应该将 C<Package> 做包名对待。你可以通过后缀包分隔符（C<::>）对此消歧，但这种
情况比较罕见，显然也很丑陋：

=begin programlisting

    # 可能是类方法
    Package->method();

    # 一定是类方法
    Package::->method();

=end programlisting

X<BEGIN>
X<DESTROY>
X<AUTOLOAD>
X<INIT>
X<UNITCHECK>
X<CHECK>
X<END>

特殊的具名代码块提供了独有的裸字。C<AUTOLOAD>、C<BEGIN>,、C<CHECK>、C<DESTROY>、
C<END>、C<INIT> 和 C<UNITCHECK> I<声明> 了函数，但无需 C<sub> 关键字。你可能熟悉
了编写不带 C<sub> 的 C<BEGIN> 惯用语：

=begin programlisting

    package Monkey::Butler;

    BEGIN { initialize_simians( __PACKAGE__ ) }

=end programlisting

你 I<可以> 不在 C<AUTOLOAD()> 声明时使用 C<sub>，但不常见。

X<constants; barewords>

用 C<constant> 编译命令定义的常量可以按裸字使用：

=begin programlisting

    # 不要在正式验证时这样做
    use constant NAME     => 'Bucky';
    use constant PASSWORD => '|38fish!head74|';

    ...

    return unless $name eq NAME && $pass eq PASSWORD;

=end programlisting

注意这些常量 I<不会> 在内插上下文，如双引号字符串，中内插。

X<prototypes; barewords>

常量是原型函数（L<prototypes>）的特例。如果你预声明了函数的原型，你就可以将函数
用作裸字；Perl 5 知道它要知道的每件事来正确的地对函数的每一处出现进行语法分析。
原型的其他缺点仍然适用。

=head2 裸字的欠考虑使用

X<barewords; cons>

裸字在现代化 Perl 代码中应该很少见；它们的歧义产生脆弱的代码。你可以在几乎所有
地方避免使用它们，但是你可能会在遗留的代码中遇到若干对裸字蹩脚的使用。

X<barewords; filehandles>

在词法文件句柄之前（L<lexical_filehandles>），所有文件和目录句柄使用裸字。你几乎
总是可以安全地将这些代码用词法文件句柄重写；除了 C<STDIN>、C<STDOUT>、C<STDERR>
以外。

X<barewords; function calls>

没有启用 C<strict 'subs'> 而编写的代码可以使用裸字函数名。你可以安全地给这些函数
的参数列表加上括号而不会改变代码意图N<使用 C<perl -MO=Deparse,-p> 可以显示 Perl
如何对其进行语法分析，接着一一加上括号。>。

X<barewords; hash values>

类似地，旧式代码不会费神正确地对哈希对的 I<值> 加上引号：

=begin programlisting

    # 不良风格；不要使用
    my %parents =
    (
        mother => Annette,
        father => Floyd,
    );

=end programlisting

因为名为 C<Floyd()> 和 C<Annette()> 的函数都不存在，Perl 将这些哈希值分析为字符串。
C<strict 'subs'> 编译命令使语法分析器在这种情况下给出错误。

X<barewords; sort functions>
X<sort>
X<operators; sort>

最后，内置的 C<sort> 操作符以第二参数的形式接受一个用于排序的函数 I<名>。作为代替，
提供一个用于排序的函数 I<引用> 可以避免使用裸字：

=begin programlisting

    # 不良用法；不要使用
    my @sorted = sort compare_lengths @unsorted;

    # 更好的风格
    my $comparison = \&compare_lengths;
    my @sorted     = sort $comparison @unsorted;

=end programlisting

结果代码要多出一行，但是它避免了对裸字的使用。不像其他裸字示例，Perl 的语法分析
器不需要对这种语法消歧义。它仅有一种解释 C<compare_lengths> 的途径。然而，显式引
用带来的清晰度为人类读者带来了好处。

Perl 5 的语法分析器并 I<不> 理解这一单行版本：

=begin programlisting

    # 无法工作
    my @sorted = sort \&compare_lengths @unsorted;

=end programlisting

这起因于对 C<sort> 的特殊语法分析；你不能使用任意表达式（诸如取具名函数的引用），
但一个代码块或者一个标量可以行得通。
