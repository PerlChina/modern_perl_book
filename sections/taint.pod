=encoding utf8

=head1 Taint

Z<taint>

Perl 给予你编写安全代码的工具。这些工具并非认真思考和计划的替代品，但它们对
谨慎和深入理解做出 I<回报>，帮助你避免隐晦的失误。

=head2 使用 Taint 模式

X<taint>
X<taint mode>

一个名为 I<taint（“污点”）模式> 或 I<taint> 的特性向所有来自程序之外的数据添
加一小部分元数据。任何衍生自污点数据的数据同样带有污点，你可以在你的程序内使
用污点数据，但如果你用其影响外部世界────如果你不安全地使用它────Perl 将抛出一
条致命异常。

C<perldoc perlsec> 中对污点模式进行翔实地解释，并带有其他的安全指导。

X<-T>

要启用污点模式，可以用 C<-T> 参数启动你的程序。你可以在将文件设置为可执行且不
使用 C<perl> 启动的情况下于 C<#!> 行中使用此参数；如果你像 C<perl mytaintedappl.pl>
这样运行它并忽略 C<-T> 参数，Perl 会以异常退出。当 Perl 遇到位于 C<#!> 行的参数
时，它已经错过了污染 C<%ENV> 中环境数据的时机，此即一例。

=head2 Sources of Taint

污点数据来自两个位置：文件输入和程序的操作环境。前者是你从文件中读取或从网页或
网络编程收集的用户数据。后者则更为隐晦。它包括命令行参数、环境变量以及来自系统
调用的数据。即便是如读取目录句柄（用 C<opendir()> 打开）的操作产出污点数据。

X<Scalar::Util>
X<tainted()>
X<taint; checking>

来自核心模块 C<Scalar::Util> 的 C<tainted()> 函数在其参数带污点时返回真：

=begin programlisting

    die "Oh no!" if Scalar::Util::tainted( $some_suspicious_value );

=end programlisting

=head2 从数据中除去污点

X<taint; untainting>
X<untainting>

要除去污点，你必须用正则表达式捕获操作从数据中提取已知良好的部分。捕获的数据将是
不带污点的。如果你的用户输入由美国电话号码组成，你可以向这样去污：

=begin programlisting

    die "Number still tainted!"
        unless $tainted_number =~ /(\(/d{3}\) \d{3}-\d{4})/;

    my $safe_number = $1;

=end programlisting

提供的模式对你所需部分描述得越具体，你的程序就越安全。相反，I<拒绝> 特定条目或
形式的手段则有可能过度看重有害数据。就安全来说，Perl 更希望你禁止不需要的安全数
据而非允许有害但看上去安全的数据。即便如此，没有什么阻止你编写捕获变量所有内容
的模式────既然如此，为什么还要使用污点模式呢？

=head2 从环境中除去污点

X<taint; removing sources of>

一个污点数据的来源就是超级全局变量 C<%ENV>，它代表了系统中的环境变量。这部分数据
带有污点，因为来自程序以外的力量可以操控这些值。任何修改 Perl 或 Shell 查找文件和
目录的环境变量都是攻击的目标。一个污点敏感的程序应该从 C<%ENV> 中删除若干键并将
C<$ENV{PATH}> 设置为具体且相当安全的路径：

=begin programlisting

    delete @ENV{ qw( IFS CDPATH ENV BASH_ENV ) };
    $ENV{PATH} = '/path/to/app/binaries/';

=end programlisting

如果你不恰当地设置 C<$ENV{PATH}>，你将收到有关其不安全性的消息。

=begin sidebar

如果这一环境变量包含当前工作目录，或者它包含相对路径，再或者指定的目录有着全局
可写的属性，一个聪明的攻击者可以通过劫持系统调用执行不安全的操作。

=end sidebar

基于相似的理由，污点模式下的 C<@INC> 并不包含当前工作目录。Perl 也将忽略 C<PERL5LIB>
以及 C<PERLLIB> 环境变量。如果你需要添加库目录，可以使用 C<lib> 编译命令或是 C<perl> 
的 C<-I> 参数。

=head2 Taint 陷阱

污点模式要么起作用要么不起。它只有开和关两种状态。有时候这会导致程序员使用宽松的
模式除去数据污点，并留下安全的错觉。请仔细审查去污代码。

X<-t>

不幸的是，并非所有模块都能正确处理污点数据。这是 CPAN 作者应该严肃对待的缺陷。如果
你必须使遗留代码污点安全（taint-safe），请考虑使用 C<-t> 参数，它启用污点模式但把违
反条件从异常改为警告。这不是完全污点模式的替代，但允许你在不使用“一 C<-T> 独大”的情
况下让现有程序更加安全。
