=encoding utf8

=head1 缺少的默认特性

Z<missing_defaults>

Perl 5 的设计过程从 1993 年持续至 1994 年，尝试为语言的新方向做好准备，却无法
预言其未来。Perl 5 增加了不少优秀的新特性，但它仍和 Perl 1 到 Perl 4 这过去的
七年保持兼容。十六年之后，编写整洁、可维护、强大和简明的 Perl 5 代码最佳途径已
经和 Perl 5.000 时代相差甚大。默认行为有时会对你有所妨碍，幸运的是，还有更佳的
行为可用。

=head2 strict 编译命令

X<strict>
X<modules; strict>
X<pragmas; strict>

C<strict> 编译命令（L<pragmas>）允许你禁用（或重新启用）诸多功能强大但可能导致
意外误用的语言结构。

C<strict> 执行三种功能：禁用符号引用、要求变量声明并且禁用对未声明裸字（L<barewords>）
的使用。虽然偶尔使用符号引用对于进行符号表修改和导出（除对辅助模块的使用之外，
比如 C<Moose>）来说是必须的，将变量用作变量名称使隐晦的超距作用（action at a distance）
错误有机可乘────或者更糟糕，使未经严格验证的用户输入恶意修改对内数据成为可能。

要求变量声明有助于防止变量名的打字错误并鼓励将词法变量限定于正确作用域。如果
所有词法变量都在合适的作用域内由 C<my> 或 C<our> 声明，则很容易就能看出其预期
的作用域。

C<strict> 在词法范围内有效，基于其用法的编译期作用域。你可以用 C<no strict> 禁
用某些 C<strict> 的特性（当然，在可能的最小范围内）。详情请参见 C<perldoc strict>。

=head2 warnings 编译命令

C<warnings> 编译命令（L<handling_warnings>）控制着 Perl 5 中诸多警告的汇报，例
如试图字符串化 C<undef> 值或对值使用错误的操作符类型。它同时对使用不推荐的特性
做出警告。

最有用的警告解释了 Perl 难以理解你的意思，只能猜测正确的解释方法。即便 Perl 通
常能猜对，由你来消除歧义总是能保证程序的正常运行。

C<warnings> 变量命令对其用法的编译期作用域有词法效果。你可以用 C<no warnings> 禁
用部分或全部警告（当然，在可能的最小范围内）。详情请参见 C<perldoc perllexwarn> 
和 C<perldoc warnings>。

=begin sidebar

结合 C<use warnings> 和 C<use diagnostics>，Perl 5 将对程序中出现的每一处警告显
示扩展诊断信息。这些扩展诊断信息来自于 C<perldoc perldiag>。此行为在 Perl 学习阶
段非常有用，但是在部署产品代码时则非如此，因为它可能产生非常详细的错误输出。

=end sidebar

=head2 IO::Handle

Perl 5.6.0 增加了词法文件句柄。在此之前，文件句柄都是包全局变量。这样做偶尔会显
得散乱和令人迷惑。现在你可以这样写：

=begin programlisting

    open my $fh, '>', $file or die "Can't write to '$file': $!\n";

=end programlisting

……C<$fh> 中的词法文件句柄简单易用。词法文件句柄的实现创建了对象；C<$fh> 是
C<IO::Handle> 的实例。不幸的是，即使 C<$fh> 是一个对象，你无法在其上调用任
何方法，因为 C<IO::Handle> 类尚未加载。

举例来说，冲洗相关文件句柄的缓冲区偶尔也会令人痛苦。它也可以这样简单：

=begin programlisting

    $fh->flush();

=end programlisting

……但仅在你程序的某处包含 C<use IO::Handle> 时才可以这样做。解决方法就是在你
的程序里加上这一行，使得词法文件句柄────原本就是对象────在行为上也和对象一致。

=head2 autodie 编译命令

Z<autodie>
X<autodie>
X<pragmas; autodie>

Perl 5 的默认错误检查有些吝啬。例如，如果你不仔细对每一个 C<open()> 调用的返
回值进行检查，你可能会尝试从一个已经关闭的文件句柄读取────或者更糟，向其写入
而导致数据丢失。C<autodie> 编译命令改变此默认行为。如果你编写：

=begin programlisting

    use autodie;

    open my $fh, '>', $file;

=end programlisting

……一个不成功的 C<open()> 调用将通过 Perl 5 的常规异常机制抛出异常。考虑到应对
失败系统调用的最佳手段是抛出异常，该编译命令可以去掉大量刻板的代码并让你因为知
道没有忘记检查返回值而感到轻松。

该编译命令于 Perl 5.10.1 进入 Perl 5 核心部分。详情请参见 C<perldoc autodie>。
