=encoding utf8

=head1 文件

Z<files>

大部分程序都以某种方式与外界交互，其中交互又多于文件中发生：读、写、修改。Perl 
早期作为系统管理和文本处理语言的历史，使其非常适用于文件修改。

=head2 输入和输出

Z<filehandle>
X<filehandle>
X<STDIN>
X<STDERR>
X<STDOUT>

与程序外界交互的主要机制是通过 I<文件句柄>。文件句柄代表输入输出通道的某种状态，
例如程序的标准输入输出、程序读取或写入的某个文件，给定文件的位置。每个 Perl 5
程序都有三个文件句柄可用，C<STDIN>（程序的输入）、C<STDOUT>（程序的输出），以及
C<STDERR> （程序的错误输出）。

默认地，用 C<print> 或 C<say> 打印的内容将流向 C<STDOUT>，同时，错误和警告和用
C<warn()> 打印的内容将流向 C<STDERR>。这种输出分离允许你将有用的输出及错误重定
向到两个不同的地方────例如，输出文件和错误日志。

=begin sidebar

X<DATA>
X<__DATA__>
X<__END__>

尚有其它可用的文件句柄；C<DATA> 代表当前文件。当 Perl 完成对文件的编译，它留着
包全局文件句柄 C<DATA> 不动，并在编译单元尾打开它。如果你在 C<__DATA__> 或是 C<__END__>
后放置字符串，你可以从 C<DATA> 文件句柄处读取它们。对于小型自包含程序来说非常实用。
C<perldoc perldata> 对此特性进行了详细的描述。

=end sidebar

X<open>
X<keywords; open>

除标准文件句柄之外，你可以用 C<open> 关键字打开自己的文件句柄。为读取打开某文件：

=begin programlisting

    open my $fh, '<', 'filename'
        or die "Cannot read '$filename': $!\n";

=end programlisting

第一个操作数是存放文件句柄的词法变量。第二个操作数是 I<文件模式>，它决定了文件
句柄操作的类型。最后的操作数是文件名。如果 C<open> 失败，C<die> 分句将抛出异常，
用 C<$!> 的内容给出了打开失败的原因。

=begin table 文件模式

Z<file_modes_table>

=headrow

=row

=cell 符号

=cell 说明

=bodyrows

=row

=cell C<< < >>

=cell 以读方式打开

=row

=cell C<< > >>

=cell 以写方式打开，如果文件存在则截断内容，如不存在则创建文件。

=row

=cell C<<< >> >>>

=cell 以写方式打开，追加到现存内容之后，不存在则创建文件。

=row

=cell C<< +< >>

=cell 以读 I<和> 写的方式打开。

=end table

除了文件，你还可以在标量上打开文件句柄：

=begin programlisting

    use autodie;

    my $captured_output;
    open my $fh, '>', \$captured_output;

    do_something_awesome( $fh );

=end programlisting

这类文件句柄支持所有现存的文件模式。

你也许会碰到使用双参数式 C<open()> 的早期代码：

=begin programlisting

    open my $fh, "> $some_file"
        or die "Cannot write to '$some_file': $!\n";

=end programlisting

文件模式和文件名之间清晰界限的缺失，在将不受信任的输入内插入第二个操作数时，会使
意外有机可乘 N<当你阅读这句时，训练自己进行如下思考：“这段代码是不是会导致安全问题？”> 。
你可以安全地将任何双参数式 C<open> 替换为三参数式，不用担心有任何功能上的损失。

X<sysopen>
X<keywords; sysopen>

C<perldoc perlopentut> 提供了更多有关 C<open> 奇形怪状用法的细节，包括它启动及控制其他
进程的能力，同时也介绍了可以对输入输出进行更加精细控制的 C<sysopen> 的用法。C<perldoc perlfaq5> 
包含处理许多常规 IO 任务的实用代码。

X<readline>
X<keywords; readline>
X<< <> >>
X<< operators; <> >>

=head3 读取文件

给出为读打开的文件句柄，可用 C<readline> 操作符从中读取内容，此操作符也写作 C<< <> >>。
最为常见的惯用语是用 C<while()> 循环从文件中一次读取一行：

=begin programlisting

    use autodie;
    open my $fh, '<', 'some_file';

    while (<$fh>)
    {
        chomp;
        say "Read a line '$_'";
    }

=end programlisting

X<keywords; eof>
X<eof>

在标量上下文中，C<readline> 遍历可以通过该文件句柄读取的每一行，直到它遇到文件结尾
（C<eof()>）。每次迭代都会返回下一行。在遇到文件结尾后，每次迭代都返回 C<undef>。此
C<while> 惯用语明确地检查迭代所用变量的是否定义，以便确保只在文件结尾处结束循环。

X<keywords; chomp>
X<chomp>

从 C<readline> 读取的每一行包含标示行结束的一个或多个字符。大多数情况下，这是一个平
台相关的序列，可由换行（C<\n>），硬回车（C<\r>），或者两者组合（C<\r\n>）构成。使用
C<chomp> 移除平台相关的换行序列。

综合上述，Perl 5 中读取文件最清晰的方式是：

=begin programlisting

    use autodie;

    open my $fh, '<', $filename;

    while (my $line = <$fh>)
    {
        chomp $line;
        ...
    }

=end programlisting

X<binmode>
X<keywords; binmode>

如果读取的不是 I<文本>────而是 I<二进制> 数据────在读写之前请在文件句柄上启用
C<binmode>。这个关键字告诉 Perl 将来自该文件句柄的数据视作纯数据。出于对平台
可移植性等考虑，Perl 不会以任何方式修改它。虽然在这种情况下类 Unix 平台不那么
需要使用 C<binmode>，可移植的程序无论如何都应使用它。更多有关 C<binmode> 的特
性请参见 L<unicode>。

=head3 写入文件

X<print>
X<keywords; print>
X<say>
X<keywords; say>

给定一个为写打开的文件句柄，你可以使用 C<print> 或者 C<say> 来写文件：

=begin programlisting

    use autodie;
    open my $out_fh, '>', 'output_file.txt';

    print $out_fh "Here's a line of text\n";
    say   $out_fh "... and here's another";

=end programlisting

注意文件句柄和后续操作数之间是没有逗号的。

=begin sidebar

由 Damian Conway 所著的 I<Perl 最佳实践> 建议养成将文件句柄包裹在大括号中的习惯。
这在对包含在集合变量内的文件句柄进行语法分析并解歧时是必须的，无论如何这是一个值
得培养的好习惯。

=end sidebar

X<$,>
X<globals; $,>
X<$\>
X<globals; $\>

你可以用 C<print> 或 C<say> 写入整列值，在这种情况下，Perl 5 使用特殊全局变量 C<$,> 作为
列表值的分隔符。Perl 同时用 C<$\> 的值作为 C<print> 和 C<say> 结尾的参数。

=head3 关闭文件

X<close>
X<keywords; close>

当你完成文件操作后，你可以用 C<close> 明确地关闭它，或者让文件句柄自行超出作用域，在这种
情况下 Perl 会替你关闭它。明确调用 C<close> 的好处是，你可以检查特定的错误────同时也可以
从其中恢复，例如，存储设备容量不足或是网络状况欠佳。

和往常一样，C<autodie>（L<autodie>）会为你处理这类检查：

=begin programlisting

    use autodie;

    open my $fh, '>', $file;

    ...

    close $fh;

=end programlisting

=head3 特殊文件句柄变量

X<variables; $.>
X<$.>

读取每一行，Perl 5 都会增加 C<$.> 的值，它可以用作行计数器。

X<variables; $.>
X<$.>

C<readline> 将 C<$/> 当前的内容用作行结束序列（详例参见 L<dynamic_scope>）。此变量
的值默认为当前平台上最合适的文本文件行结束符序列。事实上，“I<行>” 一字用法不当。你可
以将 C<$/> 设置为任意字符序列 N<……但别设置成正则表达式，因为 Perl 5 并不支持这样做。>。
这在一次读取高度结构化数据的一条 I<记录> 时很有用。

X<variables; $|>
X<$|>
X<buffering>

默认地，Perl 使用 I<缓冲式输出>，即仅在数据足够多且超出某一限制时才进行 IO 操作。这使
得 Perl 可以批量处理昂贵的 IO 操作而不必每次只写非常少量的数据。有时你想尽快发送手边的
数据而不想等待缓冲────特别是你在编写一些连接至其他程序或行式网络服务的命令行过滤器时。

当前活动的输出文件句柄缓冲由 C<$|> 变量控制。当设置为非零值时，Perl 在每次对此文件句柄
进行写入操作后都会冲洗输出。当设置为零值，Perl 仍将采用默认的缓冲策略。

X<FileHandle>
X<FileHandle; autoflush()>

作为对全局变量的代替，可以在词法文件句柄上调用 C<autoflush()> 方法。请确认加载 C<FileHandle>
在先，否则你将不能在词法文件句柄上调用此方法：

=begin programlisting

    use autodie;
    use FileHandle;

    open my $fh, '>', 'pecan.log';
    $fh->autoflush( 1 );

    ...

=end programlisting

X<FileHandle; input_line_number()>
X<FileHandle; input_record_separator()>

当加载完 C<FileHandle>，你还可以使用其中的 C<input_line_number()> 和 C<input_record_separator()>
方法，作为和 C<$.>、C<$/> 对应的替代。参考 C<perldoc FileHandle> 和 C<perldoc IO::Handle> 以获取
更多信息。

=begin sidebar

如果你使用的是 Perl 5.12 或更新版本，C<IO::File> 已经被 C<FileHandle> 所替代。

=end sidebar

=head2 目录和路径

X<opendir>
X<keywords; opendir>

你也可以用 Perl 5 修改目录和文件路径。操作文件夹和操作文件差不多，除了你不可以
I<写> 目录之外 N<作为代替，你可以保存、移动、重命名和删除其中的文件。>。你可以
用 C<opendir> 打开目录句柄：

=begin programlisting

    use autodie;

    opendir my $dirh, '/home/monkeytamer/tasks/';

=end programlisting

X<readdir>
X<keywords; readdir>

从文件夹中读取的语言关键字是 C<readdir>。就像 C<readline>，你可以一一遍历目录
内容，或者将它们一举赋值给数组：

=begin programlisting

    # 迭代
    while (my $file = readdir $dirh )
    {
        ...
    }

    # 展开为列表
    my @files = readdir $otherdirh;

=end programlisting

作为 5.12 新增特性，C<while> 循环中 C<readdir> 会设置 C<$_>，正如 C<while> 中
的 C<readline>：

=begin programlisting

    use 5.012;
    use autodie;

    opendir my $dirh, 'tasks/circus/';

    while (readdir $dirh)
    {
        next if /^\./;
        say "Found a task $_!";
    }

=end programlisting

X<Unix; hidden files>
X<files; hidden>
X<hidden files>

例子中可笑的正则表达式在 Unix 和类 Unix 系统上跳过所谓 I<隐藏文件>，即前缀点号默认
防止它们出现在文件列表中。它同时也跳过了每次 C<readdir> 调用返回的最初两个文件，特
别是 C<.> 和 C<..>。这两个文件代表了当前目录和上级目录。

X<files; relative paths>
X<files; absolute paths>

注意由 C<readdir> 返回的名称是 I<相对于> 目录自身的。换句话说，如果 F<tasks/> 目录
包含三个名为 F<eat>、F<drink> 和 F<be_monkey> 的文件，C<readdir> 将返回 C<eat>、C<drink>
以及 C<be_monkey> 而 I<非> F<tasks/eat>、F<tasks/drink> 和 F<task/be_monkey>。相反地，
I<绝对> 路径是一个完全限定于文件系统的路径。

X<closedir>
X<keywords; closedir>

可以通过越过作用域或用 C<closedir> 关键字关闭一个目录句柄。

=head3 操作路径

Perl 5 用 Unix 式的视角看待世界，至少对于文件系统部分是这样的。即便不使用类 Unix
平台，Perl 仍将解析适合于你操作系统和文件系统的 Unix 式路径。换句话说，如果你使用
Microsoft Windows，你可以和使用 F<C:\My Documents\Robots\Caprica Six\> 一般方便地
使用 F<C:/My Documents/Robots/Bender/> 这样的路径。

X<File::Spec>

即便如此，以安全的、跨平台的行为操作文件路径意味着你必须避免字符串内插和拼接。
核心模块 C<File::Spec> 系列为以安全可以移植地操作文件路径提供了抽象。即便如此，
理解并正确使用它们并不总是容易的。

X<Path::Class>
X<Path::Class::Dir>
X<Path::Class::File>

CPAN 上的 C<Path::Class> 模块为 C<File::Spec> 提供了更好的接口。可以使用 C<dir()>
函数创建代表目录的对象，以及使用 C<file()> 函数创建代表文件的对象：

=begin programlisting

    use Path::Class;

    my $meals = dir( 'tasks', 'cooking' );
    my $file  = file( 'tasks', 'health', 'exoskeleton_research.txt' );

=end programlisting

……并且你可以这样得到目录中的文件对象：

=begin programlisting

    my $lunch = $meals->file( 'veggie_calzone.txt' );

=end programlisting

……反之亦然：

=begin programlisting

    my $robots_dir = $robot_list->dir();

=end programlisting

你甚至可以打开文件和目录的文件句柄：

=begin programlisting

    my $dir_fh    = $dir->open();
    my $robots_fh = $robot_list->open( 'r' ) or die "Open failed: $!";

=end programlisting

更多信息请参见 C<Path::Class::Dir> 和 C<Path::Class::File> 文档。

=head2 文件操作

X<-X>
X<operators; -X>

除了读写文件，你还可以像在命令行或是文件管理器中那样直接操作它们。C<-X> 文件测试
操作符可以提供有关系统上文件和目录的属性信息。例如，要测试某文件是否存在：

X<operators; -e>

=begin programlisting

    say 'Present!' if -e $filename;

=end programlisting

C<-e> 操作符只有一个操作数，即文件名或者文件、目录的文件句柄。如果文件存在，此表达式
求值得真。C<perldoc -f -X> 列出了所以其他的文件测试；最著名的有：

X<operators; -f>
X<operators; -d>
X<operators; -r>
X<operators; -z>

=over 4

=item C<-f>, 如果操作数是普通文件，返回真值

=item C<-d>, 如果操作数是目录，返回真值

=item C<-r>, 如果操作数的文件属性对当前用户可读，返回真值

=item C<-z>, 如果操作数是非空文件，返回真值

=back

在 Perl 5.10.1 之后，你可以用形如 C<perldoc -f -r> 的方式察看这些文件测试操作的文档。

=begin sidebar

X<chdir>
X<keywords; chdir>
X<Cwd>

Perl 同时允许你改变当前目录。默认地，当前目录就是你启动程序的目录。核心模块 C<Cwd> 允许
你判断当前目录。C<chdir> 关键字可以用于改变当前工作目录。这在用相对────而非绝对────路径
操作文件时非常有用。

=end sidebar

X<rename>
X<keywords; rename>

C<rename> 关键字可以重命名或在目录间移动某个文件。它接受两个操作数，旧文件名和
新文件名：

=begin programlisting

    use autodie;

    rename 'death_star.txt', 'carbon_sink.txt';

=end programlisting

X<File::Copy>
X<unlink>
X<files; copying>
X<files; moving>
X<files; removing>
X<files; deleting>

复制文件没有对应的核心关键字，但是核心模块 C<File::Copy> 提供了 C<copy()> 和 C<move()>
函数两者。可以使用 C<unlink> 来删除一个或多个文件。这些函数和关键字在操作成功时候返回真
值，出错则设置 C<$!>。

=begin sidebar

C<Path::Class> 为检查特定文件属性和完整删除文件提供了便捷的方法，并且是跨平台的。

=end sidebar
